(1) Frasnian service - Silurian services
- every Silurin Service must implement the following methods:
    Service#ping(cfg, callback)    the calllback returns NIL when the service is healthy otherwise some nonempty value
    Service#start(cfg, callback)   starts the service; the callback has the form (err, stop) => where err is the error 
                                   and stop() is a synchronous function that stops the service.
    If callback is not provided, the method must return a Promise.
- the contract is defined in @silurian/serviceif 

(2) Deployer - Frasnian service contract
- Frasnian services are OCI images
- there is one service per container
- the home of the service is  /opt/prg/service
- the service is one single Javascript file  /opt/prg/service/<service_name>.js
- the service may have a configuration file  /opt/prg/service/cfg.json
- the service must provide a starter file  /opt/prg/service/start.sh
- the service must provide a healthcheck file  /opt/prg/service/healthcheck.sh
- the deployer provides an evironment variable DEVONIAN_SERCET
- the deployer raises signal SIGTERM to stop the service
- the network is 192.168.33.0/24 devoniannet
- the contract is defined in @devonian/deploymentif

(3) Implementation
- oci task: builds an image from a .json parameter file: {
  "imageFrom": "devonian/nodebase:1",
  "imageName": "famennian/someservice:1",
  "imageDomain": "frasnian",
  "imageTag": "1",
  "serviceExecutable": "lib/index.js",
  "destDir": "oci-build",
  "expose": [1234],
  "optDir": "opt",
  "ociCmd": "podman --cgroup-manager=cgroupfs"
 }
- the serviceExecutable must provide ping() and start() functions, just like above
