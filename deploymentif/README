




I.  C O N T A I N E R S
-----------------------


* Service containers

Service containers are stateless and do not store persistent data, only static data.  They are
Fedora based containers and typically offer database or HTTP services.  Persistent data on Service
containers is provided by mounted volumes.

Any of them can be replaced by another version of the container, anytime.  However, service
containers are replaced only in case of provisional measures such as hotfixes.  Normally they are
updated when the entire system is redeployed.


* Virtual server node (VSN)

The Service containers are deployed on the virtual server node. Container manager on the VSN is
rooted podman.  Healthcheck and maintenance on the Service containers are performed by cron jobs.
When a healthcheck fails, an email can be sent on the incident.  Mounted volumes have dedicated data
directories on the Virtual server node.

The Virtual server node must be able to update its OS without data loss.  Linuxes are to be updated
every six months.  A complete data migration can be achieved by transferring the data files to
another VSN.





II.  D E P L O Y M E N T   P L A N
----------------------------------


The deployment plan specifies the procedure of the disposal and recreation of the Service
containers.  It is a JSON file accompanied by an optional secret file which contains key/value pairs
in JSON.  The deployment plan is executed on the Virtual server node.  During the deployment plan
execution, existing data directories are not altered, but nonexistent directories are created.  The
deployment plan is parsed and executed by a NodeJS program so NodeJS must be installed on the VSN.

The deployment plan execution consists of the following steps:

(1) Validate the deployment plan and the VSN system. 

    Check Bash commands; check Podman or Docker; check being root.  Perform JSON schema based and
    special validations on the deployment plan JSON file.  Validate secret file if any.  In case of
    any validation error, the deployment terminates with an error.

(2) Stop then drop the Service containers and network.

    Stop and drop all containers then drop all images.  Drop the VSN container network.  In case of
    error the deployment terminates with an error and the network is dropped.

(3) Create and start the Service containers.

    Retrieve the container images and build the containers.  Container images are much smaller than
    the total storage space on the VSN.  Mount data volumes when neccessary.  RSA keys are installed
    on the VSN in /root/.ssh .  Clean the downloaded images and start the containers.  If something
    fails, terminate and rollback with an error.

(4) Create and start maintenance jobs.

    Create cleanup cron job, which purges syslog entries.  This job removes all data that is older
    than the cleanup frequency.  Create healthcheck cron job which monitors the Service containers.
    These cron jobs are generated Bash scripts.  Create a backup of the original crontab.

(5) Check and finalize the deployment.

    Perform healthcheck on all containers and rollback if any healthchek fails.  Save the deployment
    plan.

In case of deployment errors, the system is rolled back to a containerless state, while all 
persistent data is preserved. 
